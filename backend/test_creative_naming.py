"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫—Ä–µ–∞—Ç–∏–≤–æ–≤
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π .mp4 —Ñ–∞–π–ª–æ–≤
"""

from creative_naming import CreativeNamingSystem

def test_universal_decoding():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É (—Å .mp4 –∏ –±–µ–∑)"""
    system = CreativeNamingSystem()
    
    print("=" * 80)
    print("–¢–ï–°–¢ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ –®–ò–§–†–û–í–ê–ù–ò–Ø –ö–†–ï–ê–¢–ò–í–û–í")
    print("=" * 80)
    print()
    
    # –¢–µ—Å—Ç 1: –®–∏—Ñ—Ä–æ–≤–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    print("üîê –¢–ï–°–¢ 1: –®–ò–§–†–û–í–ê–ù–ò–ï –ü–†–ò–ú–ï–†–û–í –ò–ó –°–ö–†–ò–ù–®–û–¢–û–í")
    print("-" * 50)
    
    test_names = [
        "GR_Plinko6",
        "BD_plinko_nekittopchik_adapt_1"
    ]
    
    encoded_results = {}
    
    for name in test_names:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏
        for style in [1, 2, 3]:
            style_name = {1: 'iphone', 2: 'blogger', 3: 'random'}[style]
            result = system.encode_creative_name(name, style)
            
            if 'error' not in result:
                encoded_results[f"{name}_style_{style}"] = result
                print(f"‚úÖ {name} (—Å—Ç–∏–ª—å {style_name}):")
                print(f"   –í–Ω–µ—à–Ω–∏–π –∫–æ–¥: {result['external']}")
                print(f"   –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–¥: {result['internal']}")
                print()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {name}: {result['error']}")
    
    print("\nüîì –¢–ï–°–¢ 2: –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –†–ê–°–®–ò–§–†–û–í–ö–ê")
    print("-" * 50)
    
    # –¢–µ—Å—Ç 2: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ (–æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤)
    test_codes = []
    
    # –ë–µ—Ä–µ–º –∫–æ–¥—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    for key, result in encoded_results.items():
        if 'external' in result:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∏—Å—Ç—ã–π –∫–æ–¥
            test_codes.append(result['external'])
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–¥ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .mp4 (–ì–õ–ê–í–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê!)
            test_codes.append(result['external'] + '.mp4')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    test_codes.extend([
        "e5mn7V",
        "e5mn7V.mp4", 
        "o644q4c3",
        "o644q4c3.mp4",
        "O9GwFWX1RDHvSEZL6gslLzTfD58WsW",
        "O9GwFWX1RDHvSEZL6gslLzTfD58WsW.mp4",
        "nsa08lud.mp4"
    ])
    
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–¥–æ–≤:")
    for code in test_codes:
        print(f"üìù {code}")
    print()
    
    for code in test_codes:
        result = system.decode_creative_name(code)
        
        if result['success']:
            print(f"‚úÖ {code} -> {result['decoded_name']}")
            print(f"   –¢–∏–ø: {result['type']}")
            if 'parts_found' in result:
                print(f"   –ß–∞—Å—Ç–µ–π –Ω–∞–π–¥–µ–Ω–æ: {result['parts_found']}")
        else:
            print(f"‚ùå {code} -> –û–®–ò–ë–ö–ê: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥')}")
        print()
    
    print("\nüéØ –¢–ï–°–¢ 3: –ü–†–û–í–ï–†–ö–ê –û–°–ù–û–í–ù–û–ô –ü–†–û–ë–õ–ï–ú–´")
    print("-" * 50)
    
    # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    problem_cases = [
        ("o644q4c3", "o644q4c3.mp4"),
        ("e5mn7V", "e5mn7V.mp4"),
        ("O9GwFWX1RDHvSEZL6gslLzTfD58WsW", "O9GwFWX1RDHvSEZL6gslLzTfD58WsW.mp4")
    ]
    
    for clean_code, mp4_code in problem_cases:
        print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—É: {clean_code} vs {mp4_code}")
        
        result_clean = system.decode_creative_name(clean_code)
        result_mp4 = system.decode_creative_name(mp4_code)
        
        print(f"  –ß–∏—Å—Ç—ã–π –∫–æ–¥: {result_clean['success']} - {result_clean.get('decoded_name', result_clean.get('error'))}")
        print(f"  –° .mp4:     {result_mp4['success']} - {result_mp4.get('decoded_name', result_mp4.get('error'))}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        if result_clean['success'] and result_mp4['success']:
            if result_clean['decoded_name'] == result_mp4['decoded_name']:
                print("  üéâ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã")
            else:
                print("  ‚ö†Ô∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è")
        elif result_clean['success'] == result_mp4['success']:
            print("  ‚úÖ –û–±–∞ —Å–ª—É—á–∞—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤–æ")
        else:
            print("  ‚ö†Ô∏è  –†–∞–∑–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –∫–æ–¥–∞ –∏ —Å .mp4")
        print()
    
    print("\nüìä –¢–ï–°–¢ 4: –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–õ–û–í–ê–†–Ø")
    print("-" * 50)
    
    cipher_dict = system.get_cipher_dictionary()
    print(f"üìö –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Å–ª–æ–≤–∞—Ä–µ: {len(cipher_dict)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    geo_count = sum(1 for k in cipher_dict if len(k) == 2 and k.isupper())
    slot_count = sum(1 for k in cipher_dict if k in ['plinko', 'chicken', 'slots', 'poker', 'crash'])
    approach_count = sum(1 for k in cipher_dict if k in ['timer', 'couple', 'prank', 'fake', 'adapt'])
    
    print(f"üåç GEO –∫–æ–¥—ã: ~{geo_count}")
    print(f"üé∞ –ò–≥—Ä–æ–≤—ã–µ —Å–ª–æ—Ç—ã: {slot_count}")  
    print(f"üéØ –ü–æ–¥—Ö–æ–¥—ã: {approach_count}")
    
    print(f"\nüí° –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏: {', '.join(system.ignore_extensions)}")
    
    print("\n" + "=" * 80)
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("üéØ –û–°–ù–û–í–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê: —Å–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–¥—ã –∫–∞–∫ —Å .mp4, —Ç–∞–∫ –∏ –±–µ–∑")
    print("=" * 80)


def demonstrate_solution():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
    system = CreativeNamingSystem()
    
    print("\n" + "üöÄ" * 30)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ï–®–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú–´ –ò–ó –°–ö–†–ò–ù–®–û–¢–û–í")
    print("üöÄ" * 30)
    
    print("\n–ü—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞:")
    print("‚ùå o644q4c3.mp4 -> [UNKNOWN:o644q4]_[UNKNOWN:c3]")
    print("‚ùå O9GwFWX1RDHvSEZL6gslLzTfD58WsW.mp4 -> –û–®–ò–ë–ö–ê")
    
    print("\n–°–µ–π—á–∞—Å —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π:")
    
    test_cases = ["o644q4c3.mp4", "O9GwFWX1RDHvSEZL6gslLzTfD58WsW.mp4", "e5mn7V.mp4"]
    
    for code in test_cases:
        result = system.decode_creative_name(code)
        if result['success']:
            print(f"‚úÖ {code} -> {result['decoded_name']}")
        else:
            print(f"‚ö†Ô∏è  {code} -> {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    
    print(f"\nüéØ –ö–ª—é—á–µ–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ:")
    print(f"   - –°–∏—Å—Ç–µ–º–∞ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò —É–¥–∞–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .mp4, .mov, .avi –∏ –¥—Ä.")
    print(f"   - –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û –¥–ª—è –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞")
    print(f"   - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ –∫–æ—Ä–æ—Ç–∫–∏—Ö (–≤–Ω–µ—à–Ω–∏—Ö), —Ç–∞–∫ –∏ –¥–ª–∏–Ω–Ω—ã—Ö (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö) –∫–æ–¥–æ–≤")


if __name__ == "__main__":
    test_universal_decoding()
    demonstrate_solution()
