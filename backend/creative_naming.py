"""
Universal Creative Naming System (–°–∏—Å—Ç–µ–º–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫—Ä–µ–∞—Ç–∏–≤–æ–≤)
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫—Ä–µ–∞—Ç–∏–≤–æ–≤

Format: geo_slot_approach_comment_number

Features:
1. Internal "clean" naming (for us) - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π
2. External masked naming (for partners) - —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–ª–∏–ª–∏ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É
3. Universal decoding - works with both clean codes and files with .mp4 extension
"""

import base64
import hashlib
import random
import string
import re
from typing import Dict, List, Tuple, Optional, Any
import json
import os
from datetime import datetime

class CreativeNamingSystem:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫—Ä–µ–∞—Ç–∏–≤–æ–≤"""
    
    def __init__(self, save_to_file=True):
        self.save_to_file = save_to_file
        self.dict_file = "dict.json"
        self.history_file = "naming_history.json"
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        self.cipher_dict = {
            # Geographic codes (GEO)
            'BD': 'q4', 'GR': 'ns', 'US': 'e5', 'BR': 'x7', 'IN': 'w9', 'UK': 'm2',
            'DE': 'k8', 'FR': 'j6', 'IT': 'h3', 'ES': 'g1', 'CA': 'f4', 'AU': 'd2',
            'JP': 'c7', 'KR': 'b9', 'TH': 'a1', 'VN': 'z5', 'PH': 'y8', 'ID': 'x3',
            'MY': 'w6', 'SG': 'v9', 'TW': 'u2', 'HK': 't5', 'MX': 's8', 'CO': 'r1',
            
            # Slot/Game types (SLOT)
            'plinko': 'mn', 'chicken': 'lp', 'slots': '7V', 'poker': 'kj', 'crash': 'hg',
            'blackjack': 'fd', 'roulette': 'sa', 'baccarat': 'qw', 'mines': 'er', 'wheel': 'ty',
            'aviator': 'ui', 'keno': 'op', 'limbo': 'as', 'dice': 'df', 'hilo': 'gh',
            'towers': 'jk', 'stairs': 'zx', 'balloon': 'cv', 'goal': 'bn', 'scratch': 'nm',
            
            # Approaches (APPROACH)
            'timer': '08', 'couple': 'lu', 'prank': 'd9', 'fake': 'c8', 'review': 'b7',
            'tutorial': 'a6', 'reaction': '95', 'unboxing': '84', 'challenge': '73',
            'lifestyle': '62', 'travel': '51', 'cooking': '40', 'gym': '39', 'car': '28',
            'adapt': '4c', 'native': '3b', 'banner': '2a', 'video': '19', 'carousel': '08',
            
            # Comments (COMMENT) 
            'nekittopchik': '3', 'topchik': '4', 'bomb': '5', 'fire': '6', 'mega': '7',
            'super': '8', 'ultra': '9', 'best': '1', 'new': '2', 'hot': '0',
            'cool': 'a', 'nice': 'b', 'good': 'c', 'great': 'd', 'awesome': 'e',
            'perfect': 'f', 'amazing': 'g', 'fantastic': 'h', 'incredible': 'i', 'wonderful': 'j',
            
            # Numbers (NUMBER)
            '1': '1', '2': '2', '3': '3', '4': '4', '5': '5',
            '6': '6', '7': '7', '8': '8', '9': '9', '0': '0'
        }
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
        self.reverse_cipher_dict = {v: k for k, v in self.cipher_dict.items()}
        
        # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥ -> –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        self.code_to_name = {}
        
        # –°—Ç–∏–ª–∏ –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        self.masking_styles = {
            1: 'iphone',    # iPhone style: lowercase + numbers
            2: 'blogger',   # Blogger style: mix case + numbers  
            3: 'random'     # Random style: random chars
        }
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ
        self.ignore_extensions = ['.mp4', '.mov', '.avi', '.mkv', '.webm', '.jpg', '.png', '.gif']
        
        # –ò—Å—Ç–æ—Ä–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.naming_history = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        if self.save_to_file:
            self._load_from_files()

    def _generate_internal_key(self, original_name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–ª—é—á (–¥–ª–∏–Ω–Ω—ã–π) –¥–ª—è –Ω–∞—Å"""
        # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
        hash_obj = hashlib.sha256(original_name.encode('utf-8'))
        hash_hex = hash_obj.hexdigest()
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 30 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥–µ–ª–∞–µ–º mix case
        internal_key = ''
        for i, char in enumerate(hash_hex[:30]):
            if i % 2 == 0:
                internal_key += char.upper()
            else:
                internal_key += char.lower()
        
        return internal_key

    def _apply_masking_style(self, coded_name: str, style: int) -> str:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª—å –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –∫ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é"""
        if style == 1:  # iPhone style
            return coded_name.lower()
        elif style == 2:  # Blogger style  
            result = ''
            for i, char in enumerate(coded_name):
                if i % 3 == 0:
                    result += char.upper()
                else:
                    result += char.lower()
            return result
        elif style == 3:  # Random style
            result = ''
            for char in coded_name:
                if random.choice([True, False]):
                    result += char.upper()
                else:
                    result += char.lower()
            return result
        else:
            return coded_name

    def encode_creative_name(self, name: str, masking_style: int = 1) -> Dict[str, str]:
        """
        –®–∏—Ñ—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–∞
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ geo_slot_approach_comment_number
            masking_style: 1=iphone, 2=blogger, 3=random
            
        Returns:
            Dict —Å –≤–Ω–µ—à–Ω–∏–º (–¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤) –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º (–¥–ª—è –Ω–∞—Å) –∫–æ–¥–∞–º–∏
        """
        try:
            # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É geo_slot_approach_comment_number
            parts = name.lower().split('_')
            if len(parts) < 3:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è: {name}. –û–∂–∏–¥–∞–µ—Ç—Å—è: geo_slot_approach_comment_number")
            
            geo = parts[0]
            slot = parts[1] 
            approach = parts[2] if len(parts) > 2 else ''
            comment = parts[3] if len(parts) > 3 else ''
            number = parts[4] if len(parts) > 4 else '1'
            
            # –®–∏—Ñ—Ä—É–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
            coded_parts = []
            
            # GEO
            if geo in self.cipher_dict:
                coded_parts.append(self.cipher_dict[geo])
            else:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –≥–µ–æ
                new_geo_code = self._generate_new_code(geo, 2)
                self.add_cipher_mapping(geo, new_geo_code)
                coded_parts.append(new_geo_code)
                print(f"üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–¥ –¥–ª—è GEO '{geo}' -> '{new_geo_code}'")
            
            # SLOT  
            if slot in self.cipher_dict:
                coded_parts.append(self.cipher_dict[slot])
            else:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
                new_slot_code = self._generate_new_code(slot, 2)
                self.add_cipher_mapping(slot, new_slot_code)
                coded_parts.append(new_slot_code)
                print(f"üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–¥ –¥–ª—è SLOT '{slot}' -> '{new_slot_code}'")
            
            # APPROACH
            if approach and approach in self.cipher_dict:
                coded_parts.append(self.cipher_dict[approach])
            elif approach:
                new_approach_code = self._generate_new_code(approach, 2)
                self.add_cipher_mapping(approach, new_approach_code)
                coded_parts.append(new_approach_code)
                print(f"üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–¥ –¥–ª—è APPROACH '{approach}' -> '{new_approach_code}'")
            
            # COMMENT
            if comment and comment in self.cipher_dict:
                coded_parts.append(self.cipher_dict[comment])
            elif comment:
                new_comment_code = self._generate_new_code(comment, 1)
                self.add_cipher_mapping(comment, new_comment_code)
                coded_parts.append(new_comment_code)
                print(f"üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–¥ –¥–ª—è COMMENT '{comment}' -> '{new_comment_code}'")
                
            # NUMBER
            if number in self.cipher_dict:
                coded_parts.append(self.cipher_dict[number])
            else:
                coded_parts.append(number[:1])  # –ß–∏—Å–ª–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            
            # –°–æ–∑–¥–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–æ–¥ (–∫–æ—Ä–æ—Ç–∫–∏–π, –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤)
            external_code = ''.join(coded_parts)
            external_code = self._apply_masking_style(external_code, masking_style)
            
            # –°–æ–∑–¥–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–¥ (–¥–ª–∏–Ω–Ω—ã–π, –¥–ª—è –Ω–∞—Å)
            internal_code = self._generate_internal_key(name)
            
            result = {
                'external': external_code,
                'internal': internal_code,
                'original': name,
                'style': masking_style
            }
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥ -> –æ—Ä–∏–≥–∏–Ω–∞–ª)
            self._save_code_mapping(external_code, name)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é (–ë–ï–ó –ø–æ–∫–∞–∑–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ –∫–æ–¥–∞)
            self._add_to_history('encode', name, external_code, True)
            
            return result
            
        except Exception as e:
            result = {
                'error': f'–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str(e)}',
                'original': name
            }
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
            self._add_to_history('encode', name, f"ERROR: {str(e)}", False)
            return result

    def _remove_file_extension(self, code: str) -> str:
        """–£–¥–∞–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ –∫–æ–¥–∞"""
        code_clean = code
        for ext in self.ignore_extensions:
            if code_clean.lower().endswith(ext.lower()):
                code_clean = code_clean[:-len(ext)]
                print(f"üîß Removed extension {ext} from {code} -> {code_clean}")
                break
        return code_clean

    def decode_creative_name(self, code: str) -> Dict[str, Any]:
        """
        –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –∫–æ–¥ –∫—Ä–µ–∞—Ç–∏–≤–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ - —Å .mp4 –∏ –±–µ–∑)
        
        Args:
            code: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å .mp4 –∏–ª–∏ –¥—Ä—É–≥–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ)
            
        Returns:
            Dict —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ –æ—à–∏–±–∫–æ–π
        """
        try:
            # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: —É–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            clean_code = self._remove_file_extension(code)
            print(f"üîç Decoding: {code} -> clean: {clean_code}")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–¥ (–¥–ª–∏–Ω–Ω—ã–π)
            internal_result = self._decode_internal_code(clean_code)
            if internal_result['success']:
                self._add_to_history('decode', code, internal_result['decoded_name'], True)
                return internal_result
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –≤–Ω–µ—à–Ω–∏–π –∫–æ–¥ (–∫–æ—Ä–æ—Ç–∫–∏–π)
            external_result = self._decode_external_code(clean_code)
            if external_result['success']:
                self._add_to_history('decode', code, external_result['decoded_name'], True)
                return external_result
            
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å
            result = {
                'success': False,
                'error': f'Unknown code format: {clean_code}',
                'original_input': code,
                'clean_code': clean_code,
                'decoded_name': None
            }
            self._add_to_history('decode', code, f"ERROR: {result['error']}", False)
            return result
            
        except Exception as e:
            result = {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {str(e)}',
                'original_input': code
            }
            self._add_to_history('decode', code, f"EXCEPTION: {str(e)}", False)
            return result

    def _decode_internal_code(self, code: str) -> Dict[str, Any]:
        """–ü—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π (–¥–ª–∏–Ω–Ω—ã–π) –∫–æ–¥"""
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–¥—ã –∏–º–µ—é—Ç –¥–ª–∏–Ω—É 30 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –º–∏–∫—Å —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
        if len(code) == 30 and any(c.isupper() for c in code) and any(c.islower() for c in code):
            # –≠—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–¥ - –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
            return {
                'success': True,
                'decoded_name': '[INTERNAL_CODE_MATCHED]',
                'type': 'internal',
                'code': code
            }
        
        return {'success': False}

    def _decode_external_code(self, code: str) -> Dict[str, Any]:
        """–ü—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –≤–Ω–µ—à–Ω–∏–π (–∫–æ—Ä–æ—Ç–∫–∏–π) –∫–æ–¥"""
        try:
            # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
            if code.lower() in self.code_to_name:
                original_name = self.code_to_name[code.lower()]
                return {
                    'success': True,
                    'decoded_name': original_name,
                    'type': 'external_saved',
                    'code': code,
                    'method': 'direct_mapping'
                }
            
            # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –†–∞–∑–±–æ—Ä –ø–æ —á–∞—Å—Ç—è–º –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
            # –í–Ω–µ—à–Ω–∏–µ –∫–æ–¥—ã –∫–æ—Ä–æ—Ç–∫–∏–µ (–æ–±—ã—á–Ω–æ 6-12 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(code) > 15:
                return {'success': False}
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–¥ (–ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞)
            normalized_code = code.lower()
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–æ–¥ –ø–æ —á–∞—Å—Ç—è–º
            decoded_parts = []
            remaining_code = normalized_code
            
            print(f"üîß Trying to decode external code: {remaining_code}")
            
            # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ
            found_parts = []
            i = 0
            while i < len(remaining_code) and len(found_parts) < 5:
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–∞—Å—Ç–∏ —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã (–æ—Ç 3 –¥–æ 1 —Å–∏–º–≤–æ–ª–∞)
                found = False
                for length in [3, 2, 1]:
                    if i + length <= len(remaining_code):
                        part = remaining_code[i:i+length]
                        if part in self.reverse_cipher_dict:
                            found_parts.append(self.reverse_cipher_dict[part])
                            print(f"‚úÖ Found part: {part} -> {self.reverse_cipher_dict[part]}")
                            i += length
                            found = True
                            break
                
                if not found:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é —á–∞—Å—Ç—å
                    unknown_part = remaining_code[i:i+2] if i+2 <= len(remaining_code) else remaining_code[i:]
                    found_parts.append(f'[UNKNOWN:{unknown_part}]')
                    print(f"‚ùå Unknown part: {unknown_part}")
                    i += len(unknown_part)
            
            if found_parts:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                decoded_name = '_'.join(found_parts)
                return {
                    'success': True,
                    'decoded_name': decoded_name,
                    'type': 'external',
                    'code': code,
                    'parts_found': len([p for p in found_parts if not p.startswith('[UNKNOWN')])
                }
            
            return {'success': False}
            
        except Exception as e:
            print(f"‚ùå Error in external decode: {e}")
            return {'success': False}

    def batch_encode(self, names: List[str], masking_style: int = 1) -> List[Dict[str, str]]:
        """–®–∏—Ñ—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π"""
        results = []
        for name in names:
            result = self.encode_creative_name(name, masking_style)
            results.append(result)
        return results

    def batch_decode(self, codes: List[str]) -> List[Dict[str, Any]]:
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤"""
        results = []
        for code in codes:
            result = self.decode_creative_name(code)
            results.append(result)
        return results

    def get_cipher_dictionary(self) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        return self.cipher_dict.copy()

    def add_cipher_mapping(self, original: str, cipher: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –ø–∞—Ä—É —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ-—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞"""
        try:
            self.cipher_dict[original.lower()] = cipher.lower()
            self.reverse_cipher_dict[cipher.lower()] = original.lower()
            if self.save_to_file:
                self._save_dict_to_file()
            return True
        except:
            return False

    def _load_from_files(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            if os.path.exists(self.dict_file):
                with open(self.dict_file, 'r', encoding='utf-8') as f:
                    saved_dict = json.load(f)
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ
                    for key, value in saved_dict.items():
                        if key not in self.cipher_dict:
                            self.cipher_dict[key] = value
                            self.reverse_cipher_dict[value] = key
                print(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω —Å–ª–æ–≤–∞—Ä—å –∏–∑ {self.dict_file}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if os.path.exists(self.history_file):
                with open(self.history_file, 'r', encoding='utf-8') as f:
                    self.naming_history = json.load(f)
                print(f"üìú –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –∏–∑ {self.history_file}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–¥–æ–≤
            self._load_mappings_from_file()
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")

    def _save_dict_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open(self.dict_file, 'w', encoding='utf-8') as f:
                json.dump(self.cipher_dict, f, ensure_ascii=False, indent=2)
            print(f"üíæ –°–ª–æ–≤–∞—Ä—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {self.dict_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è: {e}")

    def _save_history_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open(self.history_file, 'w', encoding='utf-8') as f:
                json.dump(self.naming_history, f, ensure_ascii=False, indent=2)
            print(f"üíæ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {self.history_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

    def _add_to_history(self, operation: str, input_data: str, output_data: str, success: bool):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        if self.save_to_file:
            record = {
                'timestamp': datetime.now().isoformat(),
                'operation': operation,
                'input': input_data,
                'output': output_data,
                'success': success
            }
            self.naming_history.append(record)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 1000 –∑–∞–ø–∏—Å—è–º–∏
            if len(self.naming_history) > 1000:
                self.naming_history = self.naming_history[-1000:]
            
            self._save_history_to_file()

    def _save_code_mapping(self, code: str, original_name: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–¥ -> –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏"""
        self.code_to_name[code.lower()] = original_name.lower()
        if self.save_to_file:
            self._save_mappings_to_file()

    def _save_mappings_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–¥–æ–≤ –≤ —Ñ–∞–π–ª"""
        mappings_file = "code_mappings.json"
        try:
            with open(mappings_file, 'w', encoding='utf-8') as f:
                json.dump(self.code_to_name, f, ensure_ascii=False, indent=2)
            print(f"üíæ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–¥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {mappings_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {e}")

    def _load_mappings_from_file(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        mappings_file = "code_mappings.json"
        try:
            if os.path.exists(mappings_file):
                with open(mappings_file, 'r', encoding='utf-8') as f:
                    self.code_to_name = json.load(f)
                print(f"üîó –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–∑ {mappings_file}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {e}")

    def _generate_new_code(self, word: str, length: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã + —Ö–µ—à –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        prefix = word.lower()[:length-1] if len(word) >= length-1 else word.lower()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å
        hash_suffix = hashlib.md5(word.lower().encode()).hexdigest()[:1]
        
        candidate = prefix + hash_suffix
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–¥–∞—Ö
        counter = 0
        while candidate in self.reverse_cipher_dict or candidate in self.code_to_name:
            counter += 1
            candidate = prefix + str(counter % 10)
            if counter > 50:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                candidate = hash_suffix + str(random.randint(10, 99))[:length]
                break
        
        return candidate[:length]


def main():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
    system = CreativeNamingSystem()
    
    print("=" * 60)
    print("–°–ò–°–¢–ï–ú–ê –®–ò–§–†–û–í–ê–ù–ò–Ø –ù–ê–ó–í–ê–ù–ò–ô –ö–†–ï–ê–¢–ò–í–û–í (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)")
    print("=" * 60)
    print("–§–æ—Ä–º–∞—Ç: geo_slot_approach_comment_number (–ª—é–±—ã–µ —Å–ª–æ–≤–∞!)")
    print()
    
    if system.save_to_file:
        print("üíæ –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï:")
        print(f"üìö –°–ª–æ–≤–∞—Ä—å: {system.dict_file}")
        print(f"üìú –ò—Å—Ç–æ—Ä–∏—è: {system.history_file}")
        print(f"üîó –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: code_mappings.json")
        print()
    
    while True:
        print("–ú–µ–Ω—é:")
        print("1 - –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å")
        print("2 - –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å")
        print("3 - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        print("4 - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å")
        print("0 - –í—ã—Ö–æ–¥")
        
        choice = input("> ").strip()
        
        if choice == '0':
            print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        elif choice == '1':
            names_input = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n> ")
            names = [name.strip() for name in names_input.split(',') if name.strip()]
            
            if names:
                print("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ (iphone/blogger/random):", end=' ')
                style_input = input()
                try:
                    style = int(style_input)
                    if style not in [1, 2, 3]:
                        style = 1
                except:
                    style = 1
                
                for name in names:
                    result = system.encode_creative_name(name, style)
                    if 'error' not in result:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥ (–¥–ª–∏–Ω–Ω—ã–π –∫–æ–¥ —Å–∫—Ä—ã—Ç)
                        print(f"{name} -> {result['external']}")
                    else:
                        print(f"–û—à–∏–±–∫–∞ –¥–ª—è {name}: {result['error']}")
            else:
                print("–ù–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è!")
                
        elif choice == '2':
            codes_input = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥—ã –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n> ")
            codes = [code.strip() for code in codes_input.split(',') if code.strip()]
            
            if codes:
                for code in codes:
                    result = system.decode_creative_name(code)
                    if result['success']:
                        print(f"{code} -> {result['decoded_name']}")
                    else:
                        print(f"{code} -> –û–®–ò–ë–ö–ê: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥')}")
            else:
                print("–ù–µ –≤–≤–µ–¥–µ–Ω—ã –∫–æ–¥—ã!")
                
        elif choice == '3':
            # –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é
            if system.naming_history:
                print(f"üìú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π):")
                for record in system.naming_history[-10:]:
                    timestamp = record['timestamp'][:19]  # –£–±–∏—Ä–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                    operation = record['operation']
                    input_data = record['input']
                    output_data = record['output'][:50] + '...' if len(record['output']) > 50 else record['output']
                    status = "‚úÖ" if record['success'] else "‚ùå"
                    print(f"  {status} {timestamp} | {operation.upper()} | {input_data} -> {output_data}")
            else:
                print("üìú –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
                
        elif choice == '4':
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å
            dict_data = system.get_cipher_dictionary()
            print(f"üìö –°–ª–æ–≤–∞—Ä—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è ({len(dict_data)} –∑–∞–ø–∏—Å–µ–π):")
            print("–û—Ä–∏–≥–∏–Ω–∞–ª -> –®–∏—Ñ—Ä")
            print("-" * 30)
            for original, cipher in list(dict_data.items())[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
                print(f"{original:15} -> {cipher}")
            if len(dict_data) > 20:
                print(f"... –∏ –µ—â–µ {len(dict_data) - 20} –∑–∞–ø–∏—Å–µ–π")
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        
        print()


if __name__ == "__main__":
    main()
